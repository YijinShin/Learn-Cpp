/*
* string은 배열기반임. 

* 백터 장단점. 탐색에 용이하다. 인덱스 접근이 가늫해서
	중간삽입삭제시 비효율적이다. 메모리 재할당 시간이 든다.
* list장단점. 중간삽입삭제 용이하다
	탐색할때는 정방향,또는 역방향으로, 한칸씩만 이동가능하다.

--------------------------------------------------------------

[ deque ]

- 더블 엔디드 큐의 줄임말
- 일단 큐는 선입선출
- 더블 엔디드 큐는 양옆에서 다 들어올수있음. 
- 백터의 한 종류지만 백터를 보완하고자 만들어짐.
	백터는 pushback만 가능. deque는 앞쪽에도 추가 가능, 대신 앞쪽 추가시 무조건 인덱스 재배치 해야함.
	즉, 앞에 추가하는게 가능은한데 속도는 떨어짐
- 선형적인 구조를 가지긴하는데, 메모리 재할당을 할때 원소 갯수만큼 더해서 재할당하는게 아니라
	한번 추가할때 일정량만큼(블록단위로) 재할당함. 
	예를들면 4칸 단위로 추가한다거나. (4,9,16이런식으로)
- 배열기반이니까 임의접근 가능. (인덱스 접근 말하는거임)
	렌덤 엑세스 
- 중간삽입삭제 느리다. 백터자체가 원래 이게 느린데 deque는 vector보다 더 느림

----------------------------------------------------------------------

[ 트리 ]

set, multiset, map, multimap 이거 다 레드-블랙 트리로 구현되어있다. 

레드블랙트리는 "자가 균형 이진 탐색 트리" 

연관컨테이너의 이점은 탐색. 
	배열기반의 빠른 탐색은 "원소 갯수"를 알아야지 이점ㅇ이 있느데
	트리기반은 데이터가 엄청 많을때 탐색에 유리함.

	연관 컨테이너는ㄴ 대부분 중의 순회로 탐색함.
	전위, 중위, 후위 순회 

"모든 공학의 계념은 이곳ㅇㅔ"

참고로 백터는 천개, 만개 데이터를 저장하려면 그만한 연속적인 메모리 확보가 필요함. 
근데 연관컨테이너는 연속된 메모리는 필요없으니 아주 많은 데이터를 저장할때는 좋을지도
---------------------------------------------------------------------
set, multiset은 map보다는 덜씀

연관컨테이너(트리) >> 값 삽입, 삭제하면 무조건 정렬함. 
	즉, 탐색은 빨라도 삽입, 삭제는 시간이 걸린다.(삽입삭제 행위자체는 상수시간임, 정렬땜에 그러는거임) 
	그래서 삽입 삭제가 빈번하게 일어나는 데이터는 연관으로 잘 안쓴다. 

[set]
일단 트리기반인데, 하뒤 노드의 주소 가지고있고, key는 하나만 가진다.
key값 기준으로 정렬하고
중복 key값은 허용하지 않는다.( 중복된값 넣으면 아예 삽입안됨)

[multiset] 
중복된 값을 허용한다.  나주엥 추가된 노드가 자녀가 됨. 

set, multiset 용도 >> 원래 있는 데이터들을 트리로 정렬해서 탐색만 용이하게 하는용도로씀. 
	ex_ list에 정렬 안한상태로 데이터를 넣었는데, 이걸 정렬하고싶으면 -> set에 값을 옮겨넣으면 정렬이됨.
		물론.. list자체가 정렬함수가 있어서 이렇게하지는 않음. 그냥 이렇게 쓸 수 있다..정도.



[map]
key, value 이렇게 한쌍을 이루는 원소를 가질 수 있따. 
정렬은 key기준 
당연히 정렬은 해주지만 삽입, 삭제는 비효율적이고
반복자를 사용한 탐색만 가능하다.
인덱스마냥 렌덤 엑세스가 가능하긴하다. []연산자가 컨테이너에 오버로딩되어있기 때문
	노드 기반 컨테이너중에 유일하게 []가 있다. 
중복 key값은 허용안함. value는 중복 가능. 
리소스 탐색용으로 많이 쓴다. 

[unordered_map]
- 해쉬맵 기반으로 됭어있음.
자동정렬안해줌(?)
헤쉬맵: 배열처럼 쓰고싶은데 삽입삭제는 트리마냥하고싶어서 만든거임 

면접) 수많은 텍스처(리소스)가 있다. 선택할수있는 stl컨테이너가 unordered_map이랑 map밖에 없고, 데이터는 문자열상수임 -> 뭐선택할꺼?왜?	
	 저의: 레드블랙쓸거야? 헤쉬맵쓸거야?
	 내 경험, 컨테이너의 이해도까지 섞에서 대답해야함. (답은없음)

	 자주 삽입삭제가일어난다, 탐색을 많이한다-> 맵

	 문자열상수라면 버킷에 대한 문제가 생김. 비슷비슷한 문자열들이면 탐색을위해 버킷이 많이 필요함.
	 맵 컨테이너에 key값 저장할때, 문자열상수면 주소값을 저장함.
	 엄청 긴 문자열이면 정확도가 떨어짐 뭔소리여 

--------------------------------------
[ STL장단점 ]
그 필기 참고하기 

*/

#include "stdafx.h"
using namespace std;
