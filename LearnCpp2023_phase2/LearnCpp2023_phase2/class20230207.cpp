/* Topic: c++알아보기 
절차 지향 프로그래밍(c) vs 객체 지향 프로그래밍(c++)

객체 지향 프로그래밍(oop): 객체에 중점을 둔 프로그래밍 
	1. 실세계를 그대로 방영할 수 있다.  
		실세계에 존재하고 인지하고 있는 객체(Object)를 소프트웨어의 세계에서 표현하기위해 객체의 핵심만 추출해(추상화해) 모델링하는 프로그래밍 패러다임
		객체들간의 관계, 의사소통을 설계하는 방식으로 프로그램을 만든다. 

	2. 상속을 통해 재사용성을 보장받는다.
	3. 유지 보수 및 관리가 용이하다. 
	4. 메세지 패싱 : 프로그램들을 구성하는 객체들 간의 의사 소통이다. (주로 함수를 통해서 메세지를 주고받는 형식으로) 

	객체 = 인스턴스(메모리에 등록된 클래스. 그냥 클래스 객체 말하는거) + 클래스(실제 자료형. class자료형 정의한 그거)

	4. 5가지 특성이 있다.
		추상화, 상속, 다형성, 캡슐화
		추상 : (현실의 사물들의) 공통된 요소들을 추출하는 작업
				그렇게 뽑아낸 데이터는 변수형태로, 뽑아낸 기능은 함수형태로
				즉, 현실의 사물들을 프로그래밍언어로 치환하는 것임.
	
	class의 4대 속성
		이건 추상화라는 객체지향의 속성을 하기 위해 이런 클래스의 속성들이 나온것이다. 

		- 은닉화, 캡슐화, 상속성, 다형성
		(은닉화와 캡슐화는 상호보완관계이다. 서로 완전히 같은게 아님)

	oop의 특성은 추상화와 클래스의 4대 속성을 얘기하면 얼추 맞는거임. .. 
*/


/*
- 클래스 객체는 유니폼 초기화 안됨
- 접근제어 안쓰면 private이 디폴트임 (참고로 구조체는 public이 디폴트임. 구조체도 접근제어지시자가 있어. 이거 그럼 private으로 하면 어케된느지 보셈. 
	ㅔprivate변수나 함수가 구조체 외부에서 쓸수있는가 )

- 변수는 최대한 private으로! 거의 무조건 아니그냥 뭔 일 있는거 아니면 무조건!!
  데이터 가공은 다 함수를 통해서 하기 (get, set함수) 
  변수가 너무 많으면 구조체를 만들어서 같이 관리할 수 있는 변수들은 같이 관리해주기 
  이게 은닉화를 지키는 클래스 문법(접근제어) 

- 클래스 맴버변수는 m_를 붙일거야. 헝가리안 표기법으로 
  그리고 맴버 함수의 매개변수는 그냥 _ 만 붙이기 

- 클래스 객체 선언했을때 동작하는 정확한 원리는 나중에 배울거임. 
  근데 할튼 data영역을 사용해서 동작함. 그렇다고 이게 다 전역변수다 그건 아니고

*/

int main() {
	return 0;
}


/* 
과제
text rpg를 클래스로만들기 

성적표 프로그램만드릭
동적배열 + 클래스 쓰기
1. 입력누르면 몇명분만들지 물어봄
2. 입력한 사람수만큼 이름, 각종 성적 입력받기
3. 모두출력메뉴
4. 추가 입력 메뉴를 선택하면 기존 인원 + 새로 추가할 인원만큼 입력받기 
	기존인원은 새로 입력받는거아님! 


*/
